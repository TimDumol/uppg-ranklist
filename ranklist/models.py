# -*- coding: utf-8 -*-
## File autogenerated by SQLAutoCode
## see http://code.google.com/p/sqlautocode/
from __future__ import unicode_literals

from sqlalchemy import (
    Column,
    Integer,
    String,
    Table,
    ForeignKey,
    DateTime
)

from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    relationship
)

from zope.sqlalchemy import ZopeTransactionExtension

from ranklist.guid import GUID

DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
Base = declarative_base()

ranks_groups = Table('ranks_groups', Base.metadata,
                     Column('rank_id', Integer, ForeignKey('ranks.id')),
                     Column('group_id', Integer, ForeignKey('groups.id')))


class Rank(Base):
    __tablename__ = 'ranks'
    id = Column(Integer, primary_key=True, nullable=False)
    name = Column(String(length=64),
                  nullable=False)
    uva_id = Column(GUID, unique=True, nullable=True)
    uva_uname = Column(String(length=64), unique=True, nullable=True)
    uva_ac = Column(Integer, nullable=True)
    uva_nsubs = Column(Integer, nullable=True)
    uva_ntries = Column(Integer, nullable=True)
    uva_grank = Column(Integer, nullable=True)
    uva_last_sub = Column(DateTime)
    euler_id = Column(String(length=64), unique=True)
    euler_solved = Column(Integer(), nullable=True)
    codeforces_id = Column(String(length=64), unique=True)
    codeforces_rating = Column(Integer, nullable=True)
    codeforces_nrounds = Column(Integer, nullable=True)
    groups = relationship('Group', secondary=ranks_groups, backref='members')

    def __init__(self, name, retired, probie,
                 uva_id=None, euler_id=None, codeforces_id=None):
        self.name = name
        self.uva_id = uva_id
        self.euler_id = euler_id
        self.codeforces_id = codeforces_id

    _dict_columns = ('name', 'uva_id', 'uva_uname',
                     'uva_ac', 'uva_nsubs', 'uva_ntries',
                     'uva_grank', 'uva_last_sub',
                     'euler_id', 'euler_solved',
                     'codeforces_id', 'codeforces_rating',
                     'codeforces_nrounds')

    def to_dict(self):
        return {key: getattr(self, key) for key in self._dict_columns}


class Group(Base):
    __tablename__ = 'groups'
    id = Column(GUID, primary_key=True)
    name = Column(String(length=64))

    def __init__(self, name):
        self.name = name
